Actor_GamerPlayCard_Reqsyntax = "proto3";
package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 1;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
	int32 Time = 4;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 OldInstanceId = 3;
	int64 InstanceId = 4;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 InstanceId = 4;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 1;
	string Account = 2;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 1;
}

message ObjectQueryResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes Entity = 4;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 OldInstanceId = 2;
	bytes Unit = 3;
	repeated bytes Entitys = 4;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message Actor_PlayerEnterRoom_Req // IActorRequest
{
    int32 RpcId = 90;
    int64 ActorId = 91;
    long PlayerID = 1;
    long UserID = 2;
    long SessionID = 3;
}

message Actor_PlayerEnterRoom_Ack // IActorResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    long GamerID = 1;
}

message Actor_SetMultiples_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int32 Multiples = 1;
}

message Actor_SetLandlord_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
    repeated ET Card LordCards = 2;
}

message Actor_Gameover_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    ET Identity Winner = 1;
    int64 BasePointPerMatch = 2;
    int32 Multiples = 3;
    repeated GamerScore GamersScore = 4;
}

message Actor_GamerMoneyLess_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
}

message G2R_PlayerOnline_Req // IRequest
{
    int32 RpcId = 90;
    long UserID = 1;
    int GateAppID = 2;
}
	
message R2G_PlayerOnline_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message G2R_PlayerOffline_Req // IRequest
{
    int32 RpcId = 90;
    long UserID = 1;
}
	
message R2G_PlayerOffline_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message R2G_GetLoginKey_Req // IRequest
{
    int32 RpcId = 90;
    long UserID = 1;
}

message G2R_GetLoginKey_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    long Key = 1;
}

message R2G_PlayerKickOut_Req // IRequest
{
    int32 RpcId = 90;
    long UserID = 1;
}

message G2R_PlayerKickOut_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;

}

message G2M_PlayerExitMatch_Req // IRequest
{
    int32 RpcId = 90;
    long UserID = 1;
}

message M2G_PlayerExitMatch_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;

}

message Actor_PlayerExitRoom_Req // IActorRequest
{
    int32 RpcId = 90;
    int64 ActorId = 91;
    long UserID = 1;
}

message Actor_PlayerExitRoom_Ack // IActorResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;

}
	
message Actor_MatchSucess_Ntt // IActorMessage
{
    int32 RpcId = 90;
    long ActorId = 94;
    long GamerID = 1;
}

message MH2MP_CreateRoom_Req // IRequest
{
    int32 RpcId = 90;

}

message MP2MH_CreateRoom_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    long RoomID = 1;
}

message MP2MH_PlayerExitRoom_Req // IRequest
{
    int32 RpcId = 90;
    long RoomID = 1;
    long UserID = 2;
}
	
message MH2MP_PlayerExitRoom_Ack // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message MP2MH_SyncRoomState_Ntt // IMessage
{
    long RoomID = 1;
    RoomState State = 2;
}

message PlayerInfo // IMessage
{
	int32 RpcId = 90;
}


message Actor_GamerReady_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
}

message Actor_GamerGrabLandlordSelect_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
    bool IsGrab = 2;
}

message Actor_GamerPlayCard_Req // IActorRequest
{
	int32 RpcId = 90;
	int64 ActorId = 91;
    repeated ET Card Cards = 1;
}

message Actor_GamerPlayCard_Ack // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message Actor_GamerPlayCard_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
    repeated ET Card Cards = 2;
}

message Actor_GamerPrompt_Req // IActorRequest
{
	int32 RpcId = 90;
	int64 ActorId = 91;

}

message Actor_GamerPrompt_Ack // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
    repeated ET Card Cards = 1;
}

message Actor_GamerDontPlay_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
}

message Actor_Trusteeship_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
    bool isTrusteeship = 2;
}

message GamerInfo
{
    int64 UserID = 1;
    bool IsReady = 2;
}

message Actor_GamerEnterRoom_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    repeated GamerInfo Gamers = 1;
}

message Actor_GamerExitRoom_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
}

//抢地主状态: 参照这个，来改写抢2 和反主等
enum GrabLandlordState
{
	Not = 0;	//未抢地主
	Grab = 1;	//抢地主
	UnGrab = 2; //不抢地主
}

message GamerState
{
    int64 UserID = 1;
    ET Identity UserIdentity = 2;
	GrabLandlordState State = 3;
}

message Actor_GamerReconnect_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
	int64 UserId = 1;
    int32 Multiples = 2;
	repeated ET Card Cards = 3;
    repeated GamerState GamersState = 4;
    repeated ET Card LordCards = 5;
	
}

message GamerCardNum // IMessage
{
    int64 UserID = 1;
    int32 Num = 2;
}

message Actor_GameStart_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    repeated ET Card HandCards = 1;
    repeated GamerCardNum GamersCardNum = 2;
}

message Actor_AuthorityGrabLandlord_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
}

message Actor_AuthorityPlayCard_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 94;
    int64 UserID = 1;
    bool IsFirst = 2;
}

message GamerScore
{
    int64 UserID = 1;
    int64 Score = 2;
}